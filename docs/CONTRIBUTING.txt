Documentation is the heart of IceBrakes, I have personally encountered many projects 
where the entire readme simply says "TBD". It is very hard to understand what a project 
with such little documentation is intended to do, or even how it's intended to work. 

Now I like reading code as much as the next person but having to read the code to figure 
out a project's intended API is in fact a bad API. 

So if you want to contribute to IceBrakes I ask that you consider documenting your code 
carefully. IceBrakes' documentation needs to be succint, kind, caring, human and succint. 

Do make more technical info available but don't shove it down the reader's throat. Tell 
them what they need to know to get started with the features you are documenting. 

------------------------------------------------------------------------

At the time of publishing IceBrakes will be missing many (most) features
expected of a linter, that is because I have spent a large portion of my time
writing documentation and a testing methodology. I will be developing features
after 0.0.1 launches on github.

Therefore one of the easiest ways to contribute will be to write unit tests for
any missings features so that as I develop the features I can turn the tests on.

If you make a pull request with actual code changes, I will require that you also
include a passing test file (or multiple) formatted according to docs/TESTING_README.
Writing coherent doc strings will go a long way to getting your code merged as well.

Along with a methodology I have also written some tools to make generating and running
tests very very easy. If you are interested in learning more read docs/TESTING_README.txt