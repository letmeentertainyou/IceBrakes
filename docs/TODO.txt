######################################################
Development on IceBrakes has paused with version 0.2.0
######################################################

# MISSING FEATURES

    * Lines that end in '\' awareness

        I haven't really thought about this one yet because I think it's going to change a lot
        of my algorithm, I'm not really sure how to approach it. I suppose another boolean in
        States() to track if we are on a multiline is a good start.

        I can't decide if this feature will be simple/complex or if it's even that relevant to
        assignment so this feature is pretty low on my list. I rarely if ever use the line split
        operator.


    * Multiline Assignment (weird whitespace hack)

        I just remembered this is legal in python and I have no clue how to parse for it.

            bar: List = [1,
                        2,
                        3,
                        4 ]

        This relates heavily to the topic of shallow copies but it affects all assignments.
        We will basically need to build another dict containing all values that get assigned
        to the right of an equal sign. This will be part of equal_sign_parse and not too much
        new code but it is an entire new dict to keep track of, a bit messy.

            foo     #$
            bar = foo

        That would be always illegal in the simplest approach.


    * Multi value assignments (tuple expansion)

        This might take regex too, this one seems the most complicated to me but I just
        need to notate all the edge cases for the comma character in python and then make
        a plan. 
        
        The comma parsing engine I will have to build is also potentially part of the new right
        hand of the equal sign dict that I need to start building. I may begin by outlining how 
        the above four features will depend on each other's apis before actually writing the code. 


    * Square Brace Checker

        There are a few times when square braces can be used to assign a value and we need a
        method of linting for those. For example if bar is immutable then 
            
            bar[x] = None

        is illegal. So let's check for that type of assignment. This is going to cost a lot of 
        performance but it's fundamental to the shallow copy problem below.


    * Shallow Copy Prevention
        
        I don't think this will be too tricky but it's gonna have a lot of processing overhead
        because before I only cared about name assignments that matched the constants dict and
        after this change I will need to track the values assigned to all names in the file to
        make sure none of the constants are shallow copied to another name. So we might gain an
        an order of magnitude in time.


# CHANGELOG
Enabled tests 0000, 0004, 1001
Added exit codes 0, 1, 2
Added States dataclass to remove globals from icebrakes.py
Added whitespace.py as the first step in the scopes problem.
Did the first algo change, got no speedup.
Added test #### for invalid file names.
Second algo change got 4.75x speedup.
Added scope/namespace awareness to the algo. Will add unit tests for scope next.
Cleaned up docs/manifest.txt quite a bit,
Hashmark commented lines are now skipped.
Tests 13, 14 added.
Test 15 created.
Outlines written in TODO.txt
Cleaned up icebrakes.py with some minor performance tweaks.
Overhauled docs/IceBrakes API.txt
Added bug testing policy
Added recursive directory support and test 1003 for directories.
Added loop support and turned on tests 5 and 6.
Added basic string parsing and enabled tests 16 and 17, BUGFIX 2001.
Added a multiline comment parsing engine, and test 18.
Relegated tests 7, 8, 10 and 12 for now. 
Entered development pause on v0.2.0


Copyright Â© 2023 Lars S.
